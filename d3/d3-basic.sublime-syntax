%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: D3 Basic
file_extensions:
  - bp
scope: source.D3-basic

variables:
  linelabelref: '([a-zA-Z0-9\._]+)|([0-9]+)'
  basicvariable: '[A-Za-z][A-Za-z_\.\$0-9]*'

contexts:
  main:
    - match: (?<=;|^)\s*(\*|\!)
      comment: Basic Comments
      captures:
        '1': source.D3-basic
      push:
        - meta_scope: comment.line
        - match: $
          pop: true
          # captures:
          # '2': comment.line


    - comment: Basic Line Labels
      scope: entity.name.function
      match: (^([a-zA-Z0-9\._]+):|^([0-9]+)\b)(\s\*.*$)?
      captures:
        '1': entity.name.function
        '4': comment.line
      push: main
      # scope: entity.name.label

    - match: (\\)
      comment: Basic Stings
      push:
        - meta_scope: string.quoted.double
        - match: (\\)
          pop: true

    - match: (")
      comment: Basic Stings
      push:
        - meta_scope: string.quoted.double
        - match: (")
          pop: true

    - match: (')
      comment: Basic Stings
      push:
        - meta_scope: string.quoted.single
        - match: (')
          pop: true

    - match: (?i)(@am|@vm|@sm|@svm|@user|@pib|@account)
      comment: Basic "Constants"
      scope: constant.character

    - match: (?i)\b(abs|access|alpha|ascii|assigned|change|char|col1|col2|convert|cos|count|date|dcount|delete|dquote|dtx|ebcdic|ereplace|error|exchange|exp|extract|field|fmt|fold|iconv|index|inmat|insert|int|key|len|ln|locate|maximum|minimum|mod|not|num|occurs|oconv|oconvs|pwr|rem|replace|rnd|scan|sentence|seq|sin|sort|soundex|space|sqrt|squote|status|str|sum|summation|swap|system|tan|time|timedate|trans|trim|trimb|trimf|xtd)\(
      comment: Basic Functions
      scope: entity.name.function.languageFunction

    - match: \B@\(
      comment: Basic @() Function
      scope: entity.name.function.languageFunction

    - match: (?i)\b(for|loop|repeat|until|while|next|if)\b
      comment: Basic Flow Control
      scope: keyword.control.flow

    - match: (?i)\b(begin\s|end\s)?(case)\b
      comment: Basic Keywords
      scope: keyword.control.flow

    - match: (?i)(^|\s)\s*(end\s)?(then|else|end|locked)(\s|;|$)
      comment: Basic Keywords
      captures:
        '2': keyword.control.flow
        '3': keyword.control.flow

    - match: (?i)\b(call|chain|include|options|abort|aux|begin\swork|break|casing|cfunction|chain|clear|cleardata|clearfile|clearselect|close|commit\swork|common|compare|continue|convert|crt|data|debug|del|delete|dim|dimension|echo|enter|equ|equate|error|execute|exit|file|filelock|fileunlock|footing|get|getx|heading|in|input|inputclear|inputctrl|inputerr|inputnull|inputparity|inputtrap\soff|ins|let|locate|lock|mat|matbuild|matparse|matread[ut]?|matwrite|matwriteu|null|open|out|page|precision|print(\son)?|printchar|printer|procread|procwrite|program|prompt|read[u]?|readnext|readt|readtx|readv[u]?|release|rem|remove|replace|return|rewind|rollback\swork|root|rqm|select|send|sendx|sleep|spoolq|stop|subroutine|ta|tcl|tclread|transaction(\s(abort|cache|commit|flush|rollback|start))?|unlock|weof|write|writet|writeu|writev|writevu|writex)\b
      comment: Basic Statements
      scope: entity.name.function.languageStatement

    - match: (?i)\b(on)\s({{basicvariable}})\s(gosub|goto)\s
      comment: on gosub/goto
      captures:
        '1': entity.name.function.languageStatement 
        '3': entity.name.function.languageStatement 
      push: ongoto

    - match: (?i)\b(gosub|goto|go)\s({{linelabelref}})\b
      comment: Gosub/goto
      scope: entity.name
      captures:
        '1': entity.name.function.languageStatement
        '2': variable.function

    - match: (?i)\b(before|do|from|to|on|rtnlist|capturing|returning|setting|passlist)\b
      comment: Basic Statements
      scope: keyword.other

    - match: (?i)\b(ge|gt|le|lt|eq|ne|and|or)\b
      comment: Basic Logical Operators
      scope: keyword.operator

    - match: (\+|-|=|#|:|\*|\/|\<|\>|:=|\+=|-=)
      comment: Basic Operators
      scope: keyword.operator

    - match: (?i){{basicvariable}}
      comment: Basic Variables
      scope: variable

    - match: ;
      comment: Compound line statement 
      scope: punctuation.terminator
      push: main

  ongoto:
    - match: \b{{linelabelref}}\b
      scope: variable.function
    - match: ;|$
      pop: true
