%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: D3 Basic
file_extensions:
  - bp
scope: source.d3-basic

variables:
  linelabelref: '([A-Za-z][a-zA-Z0-9\._]+)|([0-9]+\.?[0-9]*)'
  basicvariable: '[A-Za-z][A-Za-z_\.\$0-9]*'


contexts:
  main:
    - match: (?<=;|^)\s*(\*|\!)
      captures:
        '1': punctuation.definition.comment.d3-basic
      push:
        - meta_content_scope: comment.line.d3-basic 
        - match: $\n?
          pop: true

    - match: ^(([A-Za-z]+[a-zA-Z0-9\._]*):|([0-9]+\.?[0-9]*):?)\s*(\*.*$)?
      captures:
        '2': entity.name.function.linelabel.d3-basic
        '3': entity.name.function.linelabel.d3-basic
        '4': comment.line.d3-basic

    - include: literals

    - match: (?i)^\s*(subroutine)\s({{basicvariable}})?
      captures:
        '1': support.function.builtin.basicStatement.d3-basic 
        '2': entity.name.function.linelabel.d3-basic

    - match: (?i)(?<=^|;|\s)(call)\s(({{basicvariable}})|@{{basicvariable}})
      captures: 
        '1': support.function.builtin.basicStatement.d3-basic 
        '3': variable.function.d3-basic

    - include: language_constants

    - match: (?i)(?<=^|;|\s)if[r]?(?!\.)\b
      scope: keyword.control.flow.d3-basic
      push:
        - include: then_else_block # multi-line
        - match: (?i)(?<=^|;|\s)(then|else)(?=\s) # single line
          captures:
            '1': keyword.control.flow.d3-basic
          # pop: true
        - include: main
        - include: end_pop

#   statements with then/else blocks
    - match: (?i)(?<=^|;|\s)(begin\s(work|transaction)|get[x]?|if[r]?|input|locate|lock|open|procread|rollback\swork|root|send[x]?)(?=\s)
      scope: support.function.builtin.basicStatement.d3-basic
      push:
        - include: then_else_block # multi-line
        - match: (?i)(?<=^|;|\s)(then|else)(?=\s) # single line
          captures:
            '1': keyword.control.flow.d3-basic
          pop: true
        - include: main
        - include: end_pop

#   functions with then/else blocks
    - match: (?i)(?<=^|;|\s)(key|locate)(?=\()
      scope: support.function.builtin.basicFunction.then-else.d3-basic
      push:
        - include: then_else_block # multi-line
        - match: (?i)(?<=^|;|\s)(then|else)(?=\s) # single line
          captures:
            '1': keyword.control.flow.d3-basic
          pop: true
        - include: main
        - include: end_pop

    - match: (?i)(?<=^|;|\s)(for)(?!\.)\b
      scope: keyword.control.flow.d3-basic
      push:
        - include: for_block

    - match: (?i)(?<=^|;|\s)loop(?=\s)
      scope: keyword.control.flow.d3-basic
      push: 
        - meta_content_scope: meta.block.loop.d3-basic
        - include: loop_block

    - match: (?i)(?<=^|;|\s)begin\scase(?!\.)\b
      scope: keyword.control.flow.d3-basic
      push:
        - meta_content_scope: meta.block.begin-case.d3-basic
        - include: begin_case_block

    - include: functions

    # - match: (?i)(?<=^|;|\s)(end\s)?(then|else|locked)(?=\s|$|;)
    #   captures:
    #     '1': keyword.control.flow.d3-basic
    #     '2': keyword.control.flow.d3-basic

    - match: (?i)(?<=^|;|\s)((mat)?read[v]?[u]?)\b(?=\s)({{basicvariable}})?
      captures: 
        '1': support.function.builtin.basicStatement.d3-basic
        '3': variable.d3-basic
      push:
        - match: (?i)(?<=\s)(from)(?=\s)
          scope: keyword.other.d3-basic
        - include: read_block
        - match: (?i)(?<=^|;)\s*(locked|then|else)(?!\.)\b
          captures:
            '1': keyword.control.flow.d3-basic
        - include: expression
        - include: end_pop

    - match: (?i)(?<=^|;)\s*(readnext)(?!\.)\b\s?({{basicvariable}})?\s?(from(?=\s))?
      captures:
        '1': support.function.builtin.basicStatement.readnext.d3-basic
        '2': variable.d3-basic
        '3': keyword.other.d3-basic
        '4': variable.d3-basic
      push:
        - include: readnext_block
        - match: (?i)then|else(?=\s)
          scope: keyword.control.flow.d3-basic
        - include: main
        - include: end_pop

    - match: (?i)(?<=^|;|\s)(commit\s(work|transaction)|readt[x]?|rewind|weof|matwrite[u]?|write([tx]?|([v]?[u]?)))(?=\s)
      scope: support.function.builtin.basicStatement.block.d3-basic
      push:
        - include: then_else_onerr_block
        - match: (?i)(?<=^|;)\s*(then|else|onerr)(?!\.)\b
          captures:
            '1': keyword.control.flow.d3-basic
        - include: expression
        - include: end_pop

    - match: (?i)(?<=^|;|\s)(chain|include|options|abort|aux|begin\swork|break|casing|cfunction|chain|clear|cleardata|clearfile|clearselect|close|com|common|compare|continue|convert|crt|data|debug|del|delete|dim|dimension|echo|enter|equ|equate|error|execute|exit|file|filelock|fileunlock|footing|heading|in|inputclear|inputctrl|inputerr|inputnull|inputparity|inputtrap\soff|ins|let|lock|mat|matbuild|matparse|null|out|page|precision|print(\son)?|printchar|printer|procwrite|program|prompt|release|rem|remove|replace|return|rqm|select|sleep|spoolq|stop|ta|tcl|tclread|transaction(\s(abort|cache|commit|flush|rollback|start))?|unlock)(?=\s)
      scope: support.function.builtin.basicStatement.d3-basic

    - match: (?i)(?<=^|;|\s)(on)\s({{basicvariable}})\s(gosub|goto)\s
      captures:
        '1': support.function.builtin.basicStatement.d3-basic 
        '2': variable.d3-basic
        '3': support.function.builtin.basicStatement.d3-basic 
      push: ongoto

    - match: (?i)(?<=^|;|\s)(gosub|goto|go)\s({{linelabelref}})(?=\s|$|;)
      captures:
        '1': support.function.builtin.basicStatement.d3-basic
        '2': meta.function-call.d3-basic variable.function.d3-basic

    - match: (?i)(?<=\s)(before|do|from|to|on|rtnlist|capturing|returning|setting|stacking|passlist)(?=\s)
      scope: keyword.other.d3-basic

    - include: operators

    - include: basicvariables

    - match: ;
      scope: punctuation.terminator.d3-basic

  operators:
    - match: (?i)(?<=\s)(ge|gt|le|lt|eq|ne|and|or)(?=\s)
      captures: 
        '1': keyword.operator.d3-basic

    - match: '(\+|-|\*|\/|:|=|#|\<|\>|>=|<=|:=|\+=|-=|\*=|\/=)'
      scope: keyword.operator.d3-basic

  basicvariables:
    - match: (?i)({{basicvariable}})\(?
      scope: variable.d3-basic

  literals:
    - match: (\\)
      push:
        - meta_scope: string.quoted.double.d3-basic
        - match: (\\)
          pop: true

    - match: (")
      push:
        - meta_scope: string.quoted.double.d3-basic
        - match: (")
          pop: true

    - match: (')
      push:
        - meta_scope: string.quoted.single.d3-basic
        - match: (')
          pop: true

    - match: \b((?<!\d)-)?\d+\.\d+\b
      scope: constant.numeric.float.d3-basic

    - match: \b((?<!\d)-)?\d+\b
      scope: constant.numeric.integer.d3-basic

  functions:
    - match: (?i)(?<!\.)(abs|access|alpha|ascii|assigned|change|char|col1|col2|convert|cos|count|date|dcount|delete|dquote|dtx|ebcdic|ereplace|error|exchange|exp|extract|field|fmt|fold|iconv|index|inmat|insert|int|key|len|ln|locate|maximum|minimum|mod|not|num|occurs|oconv|oconvs|pwr|rem|replace|rnd|scan|sentence|seq|sin|sort|soundex|space|sqrt|squote|status|str|sum|summation|swap|system|tan|time|timedate|trans|trim|trimb|trimf|xtd)(?=\()
      scope: support.function.builtin.basicFunction.d3-basic

    - match: \B(@)(?=\()
      scope: support.function.builtin.basicFunction.d3-basic
        
  language_constants:
    - match: (?i)\B(@am|@vm|@sm|@svm|@user|@pib|@account)\b
      scope: constant.character.d3-basic

  expression:
    - include: language_constants
    - include: functions
    - include: literals
    - include: operators
    - include: basicvariables

  then_else_block: 
    - match: (?i)(?<=^|;|\s)then|else(?=\s*($|;))
      scope: keyword.control.flow.d3-basic
      push:
        - meta_content_scope: meta.block.if.d3-basic
        - match: (?i)(?<=^|;|\s)then|else(?=\s|$|;)
          scope: keyword.control.flow.d3-basic
          pop: true
        - include: end_block

  read_block:
    - match: (?i)(?<=^|;|\s)locked|then|else(?=\s*($|;))
      scope: keyword.control.flow.d3-basic
      push:
        - meta_content_scope: meta.block.read.d3-basic
        - match: (?i)(?<=^|;|\s)(then|else|locked)(?=\s|$|;)
          scope: keyword.control.flow.d3-basic
          pop: true
        - include: end_block

  readnext_block:
    - match: (?i)(?<=^|;|\s)then|else(?=\s*(;|$))
      scope: keyword.control.flow.readnext.d3-basic
      push: 
        - meta_content_scope: meta.block.readnext.d3-basic
        - match: (?i)(?<=^|;|\s)then|else(?=\s|$|;)
          scope: keyword.control.flow.readnext.d3-basic
          pop: true
        - include: end_block

  then_else_onerr_block:
    - match: (?i)(?<=^|;|\s)then|else|onerr(?=\s*($|;))
      scope: keyword.control.flow.d3-basic
      push:
        - meta_content_scope: meta.block.d3-basic
        - match: (?i)(?<=^|;|\s)then|else|onerr(?=\s*$|;)
          scope: keyword.control.flow.d3-basic
          pop: true
        - include: end_block
        - include: main

  for_block:
    - match: (?i)(?<=\s)to(?=\s)
      scope: keyword.control.flow.d3-basic
    - match: (?i)(?<=\s)step(?=\s)
      scope: keyword.control.flow.d3-basic
    - include: expression
    - match: (?i)(?<=next)
      pop: true
    - match: (?=$|;)
      push:
        - meta_content_scope: meta.block.for.d3-basic
        - match: (?i)(?<=^|;|\s)next(?=\s)
          scope: keyword.control.flow.d3-basic
          pop: true
        - include: main

  loop_block:
    - match: (?i)(?=(^|\s)(until|while)\s)
      set:
        - match: (?i)(?<=^|\s)(until|while)(?=\s)
          scope: keyword.control.flow.d3-basic
        - match: (?i)((do\s|do$)|(?=repeat(\s|$)|;|$))
          captures:
            '2': keyword.control.flow.d3-basic
          set: 
          - meta_content_scope: meta.block.until.d3-basic
          - match: (?i)(?<=\s)do(?=;|$|\s)
            scope: keyword.control.flow.d3-basic
          - match: (?i)(?<=^|;|\s)repeat(?=\s|$|;)
            scope: keyword.control.flow.d3-basic
            pop: true
          - include: main
        - include: expression
    - match: (?i)(?<=^|;|\s)repeat(?=\s|$|;)
      scope: keyword.control.flow.d3-basic
      pop: true
    - include: main

  begin_case_block:
    - match: (?i)^\s*(case)(?=\s) 
      captures: 
        '1': keyword.control.flow.d3-basic
      push:
        - match: (?=$|;)
          push:
          - meta_content_scope: meta.block.case.d3-basic
          - include: end_case_block
          - include: main
        - include: end_case_block
        - include: expression
    - match: (?i)(?<=^|\s)end\scase(?!\.)\b
      scope: keyword.control.flow.d3-basic
      pop: true
    - include: main

  end_case_block:
    - match: (?i)(?=^\s*end\scase\b)
      pop: true
    - match: (?i)(?=^\s*case\b)
      pop: true

  end_block:
    - match: (?i)(?<=^|;|\s)end(?=\s|$)
      scope: keyword.control.flow.d3-basic
      pop: true
    - include: main

  ongoto:
    - match: \b{{linelabelref}}\b
      scope: meta.function-call.d3-basic variable.function.d3-basic
    - match: ;|((?!,)\b\s*$)
      pop: true

  end_pop:
    - match: '$'
      pop: true

  else_pop:
    - match: (?=\S)
      pop: true